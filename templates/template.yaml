AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
Parameters:
  Stage:
    Type: String
    Description: 'Put the environment name where this project will be deployed'

Resources:
  AutenticationFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: !Sub '${Stage}-Autentication'    
      CodeUri: ../
      Handler: app/request/authentication.auth
      Runtime: nodejs8.10
      Environment: 
        Variables: 
          STAGE: !Ref Stage 
      Events:
        AuthenticateEvent:
          Type: Api
          Properties:
            Path: /v1/auth
            Method: POST
            RestApiId:
              Ref: AutenticationGateway

# :::: API GATEWAY + SWAGGER :::: #
  AutenticationGateway:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: !Ref Stage
      DefinitionBody:
        swagger: '2.0'
        info:
          title: !Sub 'Autentication-${Stage}'
          version: 2.0.0
        tags:
        - name: Autenticação
          description: "Operações referentes a Autenticação"                     
        paths:
          /v1/auth:
            post:
              summary: "Autentica o usuário no sistema"
              description: "Este recurso permite que seja autenticado o usuário no sistema."
              tags:
                - Autenticação
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - in: body
                name: body
                description: Objeto usuario que será autenticado
                required: true
                schema:
                  $ref: "#/definitions/UserLoginSchema"
              responses:
                '200':
                  description: Autenticação efetuada com sucesso
                  schema:
                    $ref: "#/definitions/UserSchema"
                '400':
                  description: Requisição inválida
                  schema:
                    $ref: '#/definitions/ErrorResponseSchema'
                '401':
                  description: Unauthorized
                '403':
                  description: Forbidden
                '500':
                  description: 500 Internal Server Error
                '503':
                  description: 503 Service Unavailable
              x-amazon-apigateway-integration:
                uri:
                  !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AutenticationB2BFunction.Arn}/invocations'
                responses: {}
                httpMethod: "POST"
                type: "aws_proxy" 
        definitions:
          UserLoginSchema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
            required:
            - username
            - password
          UserSchema:
            type: object
            properties:
              user:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  username:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
              idToken:
                type: string
              sessionToken:
                type: string
              accessKeyId:
                type: string
              secretAccessKey:
                type: string
